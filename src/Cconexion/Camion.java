package Cconexion;


import com.jtattoo.plaf.noire.NoireLookAndFeel;

import java.sql.*;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import javax.swing.table.DefaultTableModel;

public final class Camion extends javax.swing.JFrame {

    DefaultTableModel model;
    private int fil;
    private Object txtmat;
    private Object txtid;

    public Camion() {
        initComponents();
        UIManager.put("Button.arc", 0);
        UIManager.put("Component.arc", 0);
        UIManager.put("CheckBox.arc", 0);
        UIManager.put("ProgressBar.arc", 0);
        limpiar();
        bloquear();
        cargar("");
        bactualizar.setEnabled(false);
        cargarConductor();
    }

void cargarConductor(){
        //this.AC.removeAllItems();
        Conexion cc=new Conexion();
        Connection cn=cc.estableceConexion();
        String sql="SELECT * FROM conductor";
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                this.cboConductor.addItem(rs.getString("Nombre_cli"));
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }    
    
    
    void cargar(String valor) {
        String[] titulos = {"ID", "Matricula", "Año", "Marca", "Modelo", "Capacidad"};
        String[] registros = new String[6];

        String sql = "SELECT * FROM camion  ";

        model = new DefaultTableModel(null, titulos);

        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                registros[0] = rs.getString("ID_cli");
                registros[1] = rs.getString("Matricula_cli");
                registros[2] = rs.getString("Año_cli");
                registros[3] = rs.getString("Marca_cli");
                registros[4] = rs.getString("Modelo_cli");
                registros[5] = rs.getString("Capacidad_cli");
                model.addRow(registros);
            }
            tcamion.setModel(model);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    void limpiar() {
        mat.setText("");
        año.setText("");
        mar.setText("");
        mod.setText("");
        cp.setText("");
    }

    void bloquear() {
        mat.setEnabled(false);
        año.setEnabled(false);
        mar.setEnabled(false);
        mod.setEnabled(false);
        cp.setEnabled(false);
        bnuevo.setEnabled(true);
        bguardar.setEnabled(false);
        bcancelar.setEnabled(false);
    }

    void habilitar() {
        mat.setEnabled(true);
        año.setEnabled(true);
        mar.setEnabled(true);
        mod.setEnabled(true);
        cp.setEnabled(true);
        bnuevo.setEnabled(false);
        bguardar.setEnabled(true);
        bcancelar.setEnabled(true);
    }

    void actualizar() {
        mat.setEnabled(true);
        año.setEnabled(true);
        mar.setEnabled(true);
        mod.setEnabled(true);
        cp.setEnabled(true);
        bactualizar.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        bg = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mat = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        año = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mod = new javax.swing.JTextField();
        bnuevo = new javax.swing.JButton();
        bguardar = new javax.swing.JButton();
        bcancelar = new javax.swing.JButton();
        bmenu = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        aux = new javax.swing.JTextField();
        bmostrar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cp = new javax.swing.JTextField();
        mar = new javax.swing.JTextField();
        bactualizar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        Beliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tcamion = new javax.swing.JTable();
        lblConductor = new javax.swing.JLabel();
        cboConductor = new javax.swing.JComboBox();

        jMenuItem1.setText("Modificar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camion");
        setResizable(false);

        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(java.awt.Color.white);
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Matricula: ");
        bg.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 9, -1, -1));
        bg.add(mat, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 6, 110, -1));

        jLabel2.setBackground(java.awt.Color.white);
        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Año: ");
        bg.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 9, -1, -1));
        bg.add(año, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 123, -1));

        jLabel3.setBackground(java.awt.Color.white);
        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Marca: ");
        bg.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 49, -1, -1));

        jLabel4.setBackground(java.awt.Color.white);
        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Modelo: ");
        bg.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 49, -1, -1));
        bg.add(mod, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 111, -1));

        bnuevo.setBackground(new java.awt.Color(0, 153, 153));
        bnuevo.setForeground(new java.awt.Color(0, 0, 0));
        bnuevo.setText("Nuevo");
        bnuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnuevoActionPerformed(evt);
            }
        });
        bg.add(bnuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 82, -1));

        bguardar.setBackground(new java.awt.Color(0, 153, 153));
        bguardar.setForeground(new java.awt.Color(0, 0, 0));
        bguardar.setText("Guardar");
        bguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bguardarActionPerformed(evt);
            }
        });
        bg.add(bguardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 82, -1));

        bcancelar.setBackground(new java.awt.Color(0, 153, 153));
        bcancelar.setForeground(new java.awt.Color(0, 0, 0));
        bcancelar.setText("Cancelar");
        bcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancelarActionPerformed(evt);
            }
        });
        bg.add(bcancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 82, -1));

        bmenu.setBackground(new java.awt.Color(51, 255, 102));
        bmenu.setForeground(new java.awt.Color(0, 0, 0));
        bmenu.setText("RMenu");
        bmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmenuActionPerformed(evt);
            }
        });
        bg.add(bmenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 82, 30));

        jLabel5.setBackground(java.awt.Color.white);
        jLabel5.setText("Buscar: ");
        bg.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 160, -1, -1));

        aux.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                auxKeyReleased(evt);
            }
        });
        bg.add(aux, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 157, 142, -1));

        bmostrar.setBackground(new java.awt.Color(0, 153, 153));
        bmostrar.setForeground(new java.awt.Color(0, 0, 0));
        bmostrar.setText("Mostrar Todos");
        bmostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmostrarActionPerformed(evt);
            }
        });
        bg.add(bmostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 157, -1, -1));

        jLabel6.setBackground(java.awt.Color.white);
        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel6.setText("Capacidad: ");
        bg.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 49, -1, -1));
        bg.add(cp, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, 120, -1));
        bg.add(mar, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 46, 121, -1));

        bactualizar.setBackground(new java.awt.Color(0, 153, 153));
        bactualizar.setForeground(new java.awt.Color(0, 0, 0));
        bactualizar.setText("Actualizar");
        bactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bactualizarActionPerformed(evt);
            }
        });
        bg.add(bactualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, -1));

        jLabel7.setBackground(java.awt.Color.white);
        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel7.setText("ID: ");
        bg.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 9, -1, -1));

        id.setEnabled(false);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        bg.add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 120, -1));

        Beliminar.setBackground(new java.awt.Color(255, 153, 51));
        Beliminar.setForeground(new java.awt.Color(0, 0, 0));
        Beliminar.setText("Eliminar");
        Beliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeliminarActionPerformed(evt);
            }
        });
        bg.add(Beliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(366, 157, -1, -1));

        tcamion.setBackground(new java.awt.Color(0, 153, 153));
        tcamion.setForeground(new java.awt.Color(0, 0, 0));
        tcamion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(tcamion);

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 510, 120));

        lblConductor.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblConductor.setText("Asignar conductor: ");
        bg.add(lblConductor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, -1, -1));

        cboConductor.setBackground(new java.awt.Color(51, 51, 255));
        cboConductor.setForeground(new java.awt.Color(0, 0, 0));
        cboConductor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona" }));
        cboConductor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboConductorActionPerformed(evt);
            }
        });
        bg.add(cboConductor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bnuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnuevoActionPerformed
        // TODO add your handling code here:
        habilitar();
    }//GEN-LAST:event_bnuevoActionPerformed

    private void bcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancelarActionPerformed
        // TODO add your handling code here:
        limpiar();
        bloquear();
    }//GEN-LAST:event_bcancelarActionPerformed

    private void bguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bguardarActionPerformed
        // TODO add your handling code here:

        if (this.mat.getText().length() == 0 || this.año.getText().length() == 0
                || this.mar.getText().length() == 0 || this.mod.getText().length() == 0
                || this.cp.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Todos los Campos Deben Llenarse", "Mensaje", 1);
        } else {
            Conexion cc = new Conexion();
            Connection cn = cc.estableceConexion();
            int idconductor=0;
            String matr, añ, marc, mode, cap;
            matr = mat.getText();
            añ = año.getText();
            marc = mar.getText();
            mode = mod.getText();
            cap = cp.getText();
         
        String sql="SELECT IDconductor_cli FROM conductor where Nombre_cli LIKE '%"+cboConductor.getSelectedItem()+"%'";
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                //this.cboConductor.addItem(rs.getString("Nombre_cli"));
                idconductor=rs.getInt("IDconductor_cli");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
            
        sql = "INSERT INTO camion(Matricula_cli, Año_cli, Marca_cli, Modelo_cli,Capacidad_cli,conductor) VALUES(?,?,?,?,?,?)";
          
            try {
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setString(1, matr);
                pst.setString(2, añ);
                pst.setString(3, marc);
                pst.setString(4, mode);
                pst.setString(5, cap);
                pst.setInt(6, idconductor);
                int n = pst.executeUpdate();
                if (n > 0) {
                    JOptionPane.showMessageDialog(null, "Registro Guardado");
                    bloquear();
                    cargar("");
                }
                limpiar();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error de Registro");
                Logger.getLogger(Boleto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bguardarActionPerformed

    private void bmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmenuActionPerformed
        // TODO add your handling code here:
        new Menu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bmenuActionPerformed

    private void auxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_auxKeyReleased
        // TODO add your handling code here:
        cargar(aux.getText());
    }//GEN-LAST:event_auxKeyReleased

    private void bmostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmostrarActionPerformed
        // TODO add your handling code here:
        aux.setText("");
        cargar("");
    }//GEN-LAST:event_bmostrarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        int fil = tcamion.getSelectedRow();
        if (fil >= 0) {
            id.setText(tcamion.getValueAt(fil, 0).toString());
            mat.setText(tcamion.getValueAt(fil, 1).toString());
            año.setText(tcamion.getValueAt(fil, 2).toString());
            mar.setText(tcamion.getValueAt(fil, 3).toString());
            mod.setText(tcamion.getValueAt(fil, 4).toString());
            cp.setText(tcamion.getValueAt(fil, 5).toString());
            actualizar();
        } else {
            JOptionPane.showMessageDialog(null, "No Se A Seleccionado Una Fila");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void bactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bactualizarActionPerformed
        // TODO add your handling code here:
        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();
        try {
            PreparedStatement pst = cn.prepareStatement("UPDATE camion SET Matricula_cli='" + mat.getText() + "',Año_cli='" + año.getText() + "',Marca_cli='" + mar.getText() + "',Modelo_cli='" + mod.getText() + "',Capacidad_cli='" + cp.getText() + "' WHERE id_viajes='" + id.getText() + "'");
            pst.executeUpdate();
            cargar("");
            bactualizar.setEnabled(false);
            bloquear();
            limpiar();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_bactualizarActionPerformed

    private void BeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeliminarActionPerformed

        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();

        // Obtener la fila seleccionada del JTable
        int fila = tcamion.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar");
            return;
        }

        // Obtener el ID del conductor a eliminar
        int ID_cli = Integer.parseInt(tcamion.getValueAt(fila, 0).toString());

        try {

            // Crear la consulta SQL para eliminar el conductor
            String sql = " DELETE FROM camion WHERE ID_cli = ?";

            try (PreparedStatement ps = cn.prepareStatement(sql)) {
                ps.setInt(1, ID_cli);
                // Ejecutar la consulta SQL para eliminar el conductor
                int resultado = ps.executeUpdate();
                if (resultado > 0) {
                    JOptionPane.showMessageDialog(this, "El conductor ha sido eliminado");

                    // Actualizar la tabla con los datos actuales de la base de datos
                    actualizarTablaAutobus();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el camion");
                }
                // Cerrar los recursos utilizados
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el conductor: " + e.getMessage());
        }
    }
public void Modificar(){
  int fila = tcamion.getSelectedRow();
    if(fila>0){
            id.setText(tcamion.getValueAt(fil, 0).toString());
            mat.setText(tcamion.getValueAt(fil, 1).toString());
            año.setText(tcamion.getValueAt(fil, 2).toString());
            mar.setText(tcamion.getValueAt(fil, 3).toString());
            mod.setText(tcamion.getValueAt(fil, 4).toString());
            cp.setText(tcamion.getValueAt(fil, 5).toString());
    
    }else {
    JOptionPane.showMessageDialog(null , "Seleccione Fila");
    
    }

}
     private void ModificarDatos() {
        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();
        try {
            PreparedStatement pasar = cn.prepareStatement("UPDATE camion SET Matricula_cli='" + mat.getText() + "',Año_cli='" + año.getText() + "',Marca_cli='" + mar.getText() + "',Modelo_cli='" + mod.getText() + "',Capacidad_cli='" + cp.getText() + "' WHERE ID_cli='" + id.getText()+"'");
            pasar.executeUpdate();
            Mostrar("");
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
     
     
     }
    
    private void actualizarTablaAutobus() throws SQLException {

        // Obtener la conexión a la base de datos
        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();

        // Obtener la fila seleccionada del JTable
        int fila = tcamion.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar");
            return;
        }

        // Obtener el ID del camión a eliminar
        int id_camion = Integer.parseInt(tcamion.getValueAt(fila, 0).toString());

        try {
            // Crear la consulta SQL para eliminar el camión
            String sql = "DELETE FROM camion WHERE ID_cli = ?";
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setInt(1, id_camion);

            // Ejecutar la consulta SQL para eliminar el camión
            int resultado = ps.executeUpdate();

            if (resultado > 0) {
                JOptionPane.showMessageDialog(this, "El camión ha sido eliminado");

                // Actualizar la tabla con los datos actuales de la base de datos
                actualizarTablaCamion();
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el camión");
            }

            // Cerrar los recursos utilizados
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el camión: " + e.getMessage());
        }
    }

    private void actualizarTablaCamion() throws SQLException {
        // Obtener la conexión a la base de datos
        Conexion cc = new Conexion();
        Connection cn = cc.estableceConexion();

        // Crear la consulta SQL para obtener los camiones
        String sql = "SELECT * FROM camion";
        PreparedStatement ps = cn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        // Crear el modelo de tabla con los datos del ResultSet
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"ID", "Matricula", "Año", "Marca", "Modelo", "Capacidad"});
        while (rs.next()) {
            Object[] row = new Object[]{rs.getInt("ID_cli"), rs.getString("Matricula_cli"), rs.getInt("Año_cli"), rs.getString("Marca_cli"), rs.getInt("Modelo_cli"), rs.getInt("Capacidad_cli")};
            model.addRow(row);
        }

        // Asignar el modelo de tabla al componente JTable
        tcamion.setModel(model);

        // Cerrar los recursos utilizados
        rs.close();
        ps.close();


    }//GEN-LAST:event_BeliminarActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        
    }//GEN-LAST:event_idActionPerformed

    private void cboConductorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboConductorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboConductorActionPerformed

   
    public static void main(String args[]) {
         
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(new NoireLookAndFeel());
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Camion.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
                new Camion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Beliminar;
    private javax.swing.JTextField aux;
    private javax.swing.JTextField año;
    private javax.swing.JButton bactualizar;
    private javax.swing.JButton bcancelar;
    private javax.swing.JPanel bg;
    private javax.swing.JButton bguardar;
    private javax.swing.JButton bmenu;
    private javax.swing.JButton bmostrar;
    private javax.swing.JButton bnuevo;
    private javax.swing.JComboBox cboConductor;
    private javax.swing.JTextField cp;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblConductor;
    private javax.swing.JTextField mar;
    private javax.swing.JTextField mat;
    private javax.swing.JTextField mod;
    private javax.swing.JTable tcamion;
    // End of variables declaration//GEN-END:variables

    private void Mostrar(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
